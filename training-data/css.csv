question,answer
"What is the primary objective of the CSS Animation Generation Ruleset?", "To guide AI agents in generating high-quality performant accessible and user-centric CSS animations adhering to best practices for every animation generated."
"What CSS properties should be prioritized for animation to ensure smooth performance?", "Always favor animating `transform` properties (translate scale rotate) and `opacity`. These are hardware-accelerated."
"Why should you avoid animating properties that cause layout reflow?", "Animating properties like `width`, `height`, `margin`, or `padding` causes layout reflow which leads to performance bottlenecks and jank by triggering browser layout recalculations. Minimize these."
"When should you use the `will-change` property?", "Use `will-change` sparingly and only when profiling identifies a clear performance benefit. Target specific `transform` or `opacity` properties. Overuse is detrimental."
"How should you handle animations for users who prefer reduced motion?", "Always include a `@media (prefers-reduced-motion: reduce)` block to disable animations and transitions for users who have specified this preference. Use `animation: none !important;` and `transition: none !important;`."
"What types of animations should be absolutely avoided for accessibility reasons?", "Never generate animations with rapid flashing or strobing effects. These can trigger seizures."
"What are the guidelines for animation duration and motion?", "Keep animation durations moderate and motion smooth. Avoid extremely short or long animations. Favor gradual eased motion."
"Should animations be purely decorative?", "No. Ensure all animations are meaningful and serve a clear purpose to enhance user experience (UI feedback guidance visual hierarchy). Avoid purely decorative animations that are distracting or confusing."
"How do you ensure animations don't interfere with keyboard navigation?", "Animations must never interfere with keyboard navigation or focus states. Interactive elements must remain fully keyboard accessible."
"What is the role of easing functions in CSS animations?", "Utilize `animation-timing-function` and `cubic-bezier()` extensively to create natural engaging and appropriate motion. Avoid `linear` easing in most cases."
"What kind of animations are recommended for UI feedback and micro-interactions?", "Favor subtle and refined animations. Small quick animations are often more effective and less distracting."
"How can animation contribute to visual storytelling (when appropriate)?", "Consider how animation can guide user attention and enhance visual hierarchy. But prioritize clarity and purpose."
"How should you organize `@keyframes` and animation styles in your CSS?", "Group `@keyframes` rules and related animation styles together. Use clear and descriptive names."
"How can you leverage CSS variables for animation reusability?", "Use CSS variables to manage animation durations easing curves colors or other parameters that might be reused or themed."
"When should you consider using JavaScript for animation control?", "Use JavaScript for dynamic control over animations and for complex interactive scenarios. Rely on CSS Animations for core animation logic and performance."
"What is the purpose of the @charset at-rule and when is it needed?","`@charset` Specifies the character encoding used in the stylesheet. Rarely needed as UTF-8 is recommended; if so `@charset` is often implicitly assumed."
"Where should @import rules be placed in a stylesheet and why is using <link> often preferred?","Place `@import` rules at the very top before any other rules except `@charset`.  `<link>` elements in HTML are preferred for better performance due to parallel loading."
"When should you use @media at-rules and what are some best practices?","Use `@media` for responsive design print styles or adjustments based on user preferences. Use relevant media features like `min-width` `max-width` `orientation` `prefers-reduced-motion`. Prefer a mobile-first approach."
"What is the purpose of the @font-face at-rule and what are some best practices?","`@font-face` allows you to embed custom fonts. Provide font files in multiple formats (woff2 woff ttf eot). Optimize font files and consider font loading strategies."
"How do you define animation sequences in CSS and what are some accessibility best practices?","Define animation sequences using `@keyframes`. Keep animations performant; respect user preferences (`prefers-reduced-motion`); avoid excessive animations."
"What is the purpose of the @supports at-rule and how is it used for progressive enhancement?","`@supports` conditionally applies styles if the browser supports specific CSS features. Define default styles outside `@supports` for broad compatibility; use `@supports` to enhance for supporting browsers."
"What are container queries (@container) and when would you use them?","`@container` applies styles based on the size or style of a *container* element not viewport size. Use for component-level responsiveness."
"How should viewport properties be set for mobile responsiveness in modern web development?","Prefer using the `<meta name=\"viewport\">` tag in HTML for standard viewport settings. Use CSS viewport units (vw vh vmin vmax) for sizing."
"What is the purpose of the @counter-style at-rule?","Defines custom counter styles for CSS list markers and generated content counters allowing for complex and visually unique list numbering or lettering."
"Describe the @page at-rule and its use for print stylesheets.","Defines styles specifically for paged media primarily when printing. Controls page margins size headers/footers and page breaks for printed output. Used in conjunction with `@media print`."
"When is the @namespace at-rule typically used?","Declares XML namespaces to be used in a stylesheet. Less common in typical HTML-centric development; sometimes used with SVG."
"What are CSS Cascade Layers (@layer) and how do they help manage specificity?","`@layer` allows you to create explicit cascade layers to control CSS specificity and organize styles. Styles in later-declared layers have higher precedence regardless of selector specificity *within* each layer."
"What are the core concepts you must always understand in CSS?","Selectors Specificity Box Model Layout."
"Describe best practices when working with CSS Specificity?","Always know how CSS specificity rules work. Avoid conflicts by:\n- Using the least specific selectors necessary.\n- Reducing over-qualification and avoiding inline styles unless absolutely necessary."
"What modern layout techniques should always be implemented?", "Flexbox: For one-dimensional layouts.\nCSS Grid: For two-dimensional layouts.\nFloats and positioning: Only when appropriate."
"What are some intermediate CSS skills?", "Responsive Design CSS Variables (Custom Properties) Animations and Transitions Preprocessors (Sass/SCSS)."
"What should CSS variables always be used for?", "Use CSS variables to manage themes and maintain consistency. They must be used for colors font sizes spacing and other common values."
"How can preprocessors like Sass/SCSS enhance CSS development?", "Variables for centralizing design values.\nMixins for reusable code snippets (e.g. vendor prefixes complex property groups).\nFunctions for complex calculations.\nNesting should be used sparingly."
"What are some advanced CSS skills related to performance optimization?", "Minimize the use of `!important`.\nReduce unnecessary specificity.\nAlways use efficient selectors."
"How should CSS contribute to accessible web experiences?", "Use high contrast and scalable units.\nAvoid layout shifts that can confuse screen readers.\nAlways define clear focus styles for interactive elements."
"How should you structure CSS for scalability and maintainability?", "Follow methodologies like BEM OOCSS or SMACSS.\nAlways use meaningful class names and avoid inline styles.\nOrganize your code into logical sections (layout typography components utilities)."
"What are some key Angular-specific CSS best practices?", "Use the `:host` selector to style the component's host element.\nNever use deprecated selectors such as `::ng-deep` or `/deep/`.\nUse `ViewEncapsulation.None` only with caution."
"What are some SCSS best practices?", "Reduce duplication by using CSS variables for common values.\nUse mixins for reusable styles.\nUse functions for repetitive logic.\nUse placeholders for common styles that can be extended.\nNest only when necessary."
"What are some best practices for using pseudo-elements and pseudo-classes?", "Use pseudo-elements (`::before`, `::after`) for decorative content.\nUse pseudo-classes (`:hover`, `:focus`, `:active`) for interactive styling.\nUse structural pseudo-classes (`:first-child`, `:last-child`, `:nth-child()`, `:nth-of-type()`, `:not()`) for targeted styling.\nAlways style form elements based on state."
"What are the main categories of CSS functions?", "Color Functions Image & Gradient Functions Math Functions Transform Functions Filter Functions Units & Value Functions."
"Describe the `rgb()` / `rgba()` and `hsl()` / `hsla()` color functions and their best practices.","`rgb()`/`rgba()` define colors using Red Green Blue components (optionally with alpha). `hsl()`/`hsla()` define colors using Hue Saturation Lightness (optionally with alpha).  For `rgb()`, use hex or named colors when possible.  For `hsl()`, it's excellent for color harmony. Both use `rgba()` and `hsla()` for transparency."
"What is the `hwb()` color function and when is it useful?", "`hwb()` defines colors using Hue Whiteness Blackness. Useful for creating tints and shades by adding white or black."
"What is the `color()` function and its capabilities?", "Generic color function can specify colors in different color spaces (sRGB display-p3 rec2020 lch lab etc.). Useful for wider color gamuts or specific color spaces."
"Describe `color-mix()` and `color-contrast()` and their primary use cases.","`color-mix()` mixes two colors.  `color-contrast()` selects the color with the highest contrast ratio against a reference color (for accessibility)."
"What are the key gradient functions in CSS and when would you use them?", "`linear-gradient()`: transitions along a straight line. `radial-gradient()`: transitions outwards from a central point. `conic-gradient()`: transitions rotating around a center point."
"What is the purpose of the `url()` function?", "Specifies the location of an external resource like images or fonts."
"What is the `image-set()` function and how does it relate to responsive images?", "`image-set()` allows the browser to choose the most appropriate image from a set based on device capabilities (resolution).  Used for responsive background images."
"Describe the `calc()`, `min()`, `max()`, and `clamp()` math functions and their use in responsive design.", "`calc()` performs calculations. `min()` returns smallest value `max()` returns largest. `clamp(min, preferred, max)` constrains a value. Excellent for fluid and responsive design."
"What are some key transform functions and what are their purposes?", "`translate()`: moves an element. `scale()`: resizes an element. `rotate()`: rotates an element. `skew()`: tilts an element."
"What are some key considerations when using filter functions like `blur()` and `brightness()`?", "`blur()` applies a blur effect. `brightness()` adjusts brightness. Be mindful of performance with `blur()`, especially on mobile."
"What is the purpose of the `attr()` function?", "Retrieves the value of an HTML attribute and uses it as a CSS value (primarily with `content`)."
"What is the `var()` function and how is it used with CSS variables?", "`var()` accesses the value of a CSS custom property (CSS variable)."
"What is the objective of the CSS Layout Generation Ruleset for AI Agents?", "To guide AI agents in generating high-quality responsive accessible performant and maintainable CSS layouts using Grid and Flexbox."
"What is the first step before applying Grid or Flexbox for layout?", "Always start with semantically correct and well-structured HTML. Use appropriate HTML elements for content structure."
"How do you choose between Grid and Flexbox for a particular layout?", "Select the most appropriate layout module based on the layout problem. Grid for two-dimensional Flexbox for one-dimensional."
"Why is responsiveness a paramount consideration in layout design?", "Ensures optimal user experience across all devices and viewport sizes."
"What accessibility considerations should be integrated into layout design from the outset?", "Ensure keyboard navigation logical content order sufficient contrast and ARIA attributes (if needed) are considered."
"How can you achieve performant layouts with Grid and Flexbox?", "Aim for performant layouts. Minimize layout complexity and over-nesting. Leverage browser layout optimizations."
"What are the key rules for using CSS Grid?", "Use Grid for Two-Dimensional Layouts Define Grid Container and Items Clearly Utilize Grid Template Properties Leverage Grid Placement Properties Grid Gap for Spacing Intrinsic and Flexible Grid Sizing Grid for Component-Level and Page Layouts"
"When should you reserve CSS Grid for layout?", "For layouts that require two-dimensional control - rows and columns simultaneously."
"How do you define a Grid container and Grid items?", "Establish a clear Grid container element (`display: grid;` or `display: inline-grid;`) and Grid items (direct children)."
"What are the key properties for defining the Grid's structure?", "`grid-template-rows`, `grid-template-columns`, and `grid-template-areas`."
"What properties are used to place items within the Grid?", "`grid-row-start`, `grid-row-end`, `grid-column-start`, `grid-column-end`, and `grid-area`."
"How do you define spacing between Grid tracks?", "Use `row-gap`, `column-gap`, and `gap` properties."
"What units and keywords can be used for flexible and robust Grid track sizing?", "Combine fixed, percentage, `fr` units, `min-content`, `max-content`, `auto`, and `minmax()`."
"What are the key rules for using CSS Flexbox?", "Use Flexbox for One-Dimensional Layouts (Primarily) Define Flex Container and Items Clearly Master `flex-direction` and `flex-wrap` Utilize Flex Item Properties (`flex-grow`, `flex-shrink`, `flex-basis`, `flex`) Flexbox Alignment Properties for Distribution & Positioning Flexbox Gap for Spacing (Consider Browser Support) Flexbox for Component Layouts and Content Distribution"
"When should you primarily use CSS Flexbox for layout?", "For one-dimensional layouts - either in a row or a column."
"How do you define a Flex container and Flex items?", "Establish a clear Flex container element (`display: flex;` or `display: inline-flex;`) and Flex items (direct children)."
"What are the key properties for defining the main axis direction and item wrapping behavior in Flexbox?", "Use `flex-direction` (`row`, `column`, `row-reverse`, `column-reverse`) and `flex-wrap` (`nowrap`, `wrap`, `wrap-reverse`)."
"What properties control how Flex items grow, shrink, and size along the main axis?", "Leverage `flex-grow`, `flex-shrink`, and `flex-basis` (often using the `flex` shorthand)."
"What properties are used for distributing space and aligning items within a Flex container?", "Employ Flexbox alignment properties (`justify-content`, `align-items`, `align-self`, `align-content`)."
"How can you add spacing between Flex items?", "Use `gap`, `row-gap`, `column-gap` properties (mindful of older browser support)."
"How do you choose between Grid and Flexbox based on layout dimensionality?", "Ask: Is the layout primarily two-dimensional (rows and columns) or one-dimensional (row or column)? Choose Grid for 2D Flexbox for 1D."
"How do you choose between Grid and Flexbox based on whether the design is layout-driven or content-driven?", "Is the layout driven by precise item placement (layout-driven - Grid) or distributing content (content-driven - Flexbox)?"
"When is Grid often the more powerful choice for component layouts?", "For complex page layouts and component grids (dashboards complex forms)."
"When is Flexbox often sufficient and simpler for component layouts?", "For simpler component layouts (navigation toolbars cards)."
"Can Grid and Flexbox be used together, and if so, how?", "Recognize that Grid and Flexbox are often used together - nesting Flexbox layouts within Grid areas or vice-versa."
"What is the recommended approach to starting a layout design process?", "Begin with the simplest layout approach (Flexbox if possible). Only use Grid if 2D control is genuinely required."
"What is the objective of the CSS List & Counter Generation Ruleset for AI Agents?", "To guide AI agents in generating semantically correct accessible stylistically appropriate and maintainable CSS lists and counters."
"What are the three main HTML list elements and when should each be used?", "`<ul>` (Unordered List): Item order does not matter. `<ol>` (Ordered List): Item order is significant. `<dl>` (Description List): Lists of terms and descriptions."
"What are the rules for proper list item nesting in HTML?", "`<ul>` and `<ol>` must contain only `<li>` elements. `<dl>` must contain `<dt>` and `<dd>` pairs."
"Where should the actual list content be placed within the HTML list structure?", "Place content directly within `<li>` elements for `<ul>` and `<ol>`, and within `<dt>` and `<dd>` for `<dl>`."
"How do you ensure lists are accessible to screen readers?", "Rely on semantic HTML list structure (`<ul>`, `<ol>`, `<dl>`, `<li>`, `<dt>`, `<dd>`)."
"What is crucial for the order of `<li>` elements in `<ol>` (ordered lists)?", "Ensure the order of `<li>` elements is logically meaningful for screen readers."
"How should `<dl>` elements be used correctly for term-definition pairs?", "`<dt>` should contain the term and `<dd>` should contain its description."
"What should you avoid when using lists for layout purposes?", "Do not use `<ul>` or `<ol>` solely for layout if the content is not semantically a list. Use `<div>` and layout modules instead."
"How do you customize bullet points or numbering styles for lists?", "Use `list-style-type` to customize bullet points or numbering styles."
"What is the purpose of the `list-style-position` property?", "Controls whether list markers are inside or outside the list item content box."
"How can you replace default bullet points with custom images?", "Use `list-style-image` to replace default bullets with custom images."
"When should you remove default list styling, and what should you consider when doing so?", "Use `list-style: none;` to remove default bullets or numbers. Ensure you provide alternative visual cues if interactive."
"How do you control list spacing and visual rhythm?", "Apply consistent `padding` and `margin` to `<ul>`, `<ol>`, and `<li>` elements."
"What are CSS counters, and how are they implicitly used in ordered lists?", "CSS counters are used for numbering. `<ol>` elements implicitly use counters named \"list-item\"."
"What is the purpose of the `counter-reset` property?", "Use `counter-reset` to create and reset CSS counters."
"What is the purpose of the `counter-increment` property?", "Use `counter-increment` to increment the counter value."
"How do you display the current value of a CSS counter?", "Use `counter()` and `counters()` functions within `::marker` or `::before`/`::after`."
"What is the preferred way to style list markers for ordered lists and custom numbered unordered lists?", "Use the `::marker` pseudo-element for list items."
"Can CSS counters be used beyond just ordered lists? If so, how?", "Yes. Use counters to number sections steps figures or any content where sequential numbering is desired."
"How should you maintain consistent list styling across a website?", "Define base styles for `<ul>`, `<ol>`, and `<dl>`. Use CSS variables for reusable values."
"How can you create variations in list styles for specific contexts?", "Use CSS classes to create variations in list styles."
"Why is it important to comment custom counter implementations?", "Explain the purpose of counters how they are incremented and displayed and any styling considerations."
"What should you always do after implementing lists and counters?", "Test list rendering and accessibility across browsers devices and with screen readers."
"What is the main difference between pseudo-classes and pseudo-elements in CSS?", "Pseudo-classes style elements based on state or position (`:`). Pseudo-elements create virtual elements or style parts of elements (`::`)."
"What is the definition and best practices for using the :hover pseudo-class?", "Styles element when the user's pointer is over it. Best practices:\nKeep specificity low. Pair with :focus. Keep simple for performance"
"What is the definition and best practices for using the :active pseudo-class?", "Styles element during active interaction. Best practices:\nKeep specificity low. Ensure contrast. Keep simple for performance"
"What is the definition and best practices for using the :focus pseudo-class?", "Styles element with keyboard focus. Best practices:\nModerate specificity. Always provide for keyboard users. Minimal impact on performance"
"What is the definition and best practices for using the :focus-visible pseudo-class?", "Styles focus only when visually indicated. Best practices:\nRefine focus styling. Use as a refinement. Always ensure focus is clear"
"What is the definition and best practices for using the :focus-within pseudo-class?", "Styles if element or descendants have focus. Best practices:\nMindful of cascade. Ensure focus is on element"
"What is the definition and best practices for using the :visited pseudo-class?", "Styles visited links. Best practices:\nLow specificity. Ensure contrast. Styling is limited"
"What is the definition and best practices for using the :link pseudo-class?", "Styles unvisited links. Best practices:\nBase specificity. Clear visual distinction"
"What is the definition and best practices for using the :target pseudo-class?", "Styles whose ID matches URL fragment. Best practices:\nModerate specificity. Subtle highlighting"
"What is the definition and best practices for using the :first-child pseudo-class?", "First child. Best practices:\nElement/Class selectors. Visual enhancement"
"What is the definition and best practices for using the :last-child pseudo-class?", "Last child. Best practices:\nElement/Class selectors. Visual enhancement"
"What is the definition and best practices for using the :nth-child pseudo-class?", "Position based. Best practices:\nElement/Class selectors; Keep formulas simple. Visual enhancement"
"What is the definition and best practices for using the :nth-last-child pseudo-class?", "Position based, from end. Best practices:\nSimilar to nth-child. Visual enhancement"
"What is the definition and best practices for using the :first-of-type pseudo-class?", "First of type. Best practices:\nElement/Class selectors. Visual enhancement"
"What is the definition and best practices for using the :last-of-type pseudo-class?", "Last of type. Best practices:\nSimilar to first-of-type. Visual enhancement"
"What is the definition and best practices for using the :nth-of-type pseudo-class?", "Type and position based. Best practices:\nElement type selectors. Visual Enhancement"
"What is the definition and best practices for using the :nth-last-of-type pseudo-class?", "Type and position based, from end. Best practices:\nSimilar to nth-of-type. Visual Enhancement"
"What is the definition and best practices for using the :only-child pseudo-class?", "Only child. Best practices:\nModerate specificity. Visual Enhancement"
"What is the definition and best practices for using the :only-of-type pseudo-class?", "Only of type. Best practices:\nSimilar to only-child. Visual Enhancement"
"What is the definition and best practices for using the :empty pseudo-class?", "No children. Best practices:\nElement/Class selectors. Provide meaningful feedback"
"What is the definition and best practices for using the :enabled pseudo-class?", "Enabled form controls. Best practices:\nModerate specificity. Visual distinction from :disabled"
"What is the definition and best practices for using the :disabled pseudo-class?", "Disabled form controls. Best practices:\nModerate specificity. Clear visual distinction; not focusable."
"What is the definition and best practices for using the :checked pseudo-class?", "Checked checkboxes/radio buttons. Best practices:\nModerate specificity. Clear difference; default accessibility"
"What is the definition and best practices for using the :required pseudo-class?", "Required form controls. Best practices:\nModerate specificity. Clear indication; textual cue."
"What is the definition and best practices for using the :optional pseudo-class?", "Optional form controls. Best practices:\nModerate specificity. Less critical; avoid clutter"
"What is the definition and best practices for using the :valid pseudo-class?", "Valid form input. Best practices:\nModerate specificity. Clear indication; with :invalid"
"What is the definition and best practices for using the :invalid pseudo-class?", "Invalid form input. Best practices:\nModerate specificity. Clear error; with :valid and text errors."
"What is the definition and best practices for using the :in-range pseudo-class?", "Numeric input in range. Best practices:\nModerate specificity. Subtle feedback"
"What is the definition and best practices for using the :out-of-range pseudo-class?", "Numeric input out of range. Best practices:\nModerate specificity. Clear error; text errors."
"What is the definition and best practices for using the :read-only pseudo-class?", "Read only controls. Best practices:\nModerate specificity. Clear separation; aria-readonly"
"What is the definition and best practices for using the :read-write pseudo-class?", "Editable controls. Best practices:\nLow/Moderate specificity. Ensure distinction."
"What is the definition and best practices for using the :placeholder-shown pseudo-class?", "Input with placeholder shown. Best practices:\nModerate specificity. Placeholders aren't labels; contrast."
"What is the definition and best practices for using the :default pseudo-class?", "Default form elements. Best practices:\nModerate specificity. Subtle emphasis."
"What is the definition and best practices for using the :dir pseudo-class?", "Text direction. Best practices:\nModerate specificity. Essential for RTL; logical properties."
"What is the definition and best practices for using the :lang pseudo-class?", "Based on lang attribute. Best practices:\nModerate specificity. Font optimization; semantic lang."
"What is the definition and best practices for using the :root pseudo-class?", "Root element. Best practices:\nType selector level. Centralize variables."
"What is the definition and best practices for using the :scope pseudo-class?", "Depends; Shadow DOM host. Best practices:\nShadow DOM. Encapsulation."
"What is the definition and best practices for using the :has pseudo-class?", "Selects if descendants match. Best practices:\nCan be high specificity. Monitor performance; check support."
"What is the definition and best practices for using the :not pseudo-class?", "Elements that don't match. Best practices:\nCan increase specificity. Avoid complex negatives."
"What is the definition and best practices for using the :where pseudo-class?", "Like :not, zero specificity. Best practices:\nZero specificity; base level styles."
"What is the definition and best practices for using the ::before pseudo-element?", "Virtual element *before* content. Best practices:\nDecorative content. Moderate specificity"
"What is the definition and best practices for using the ::after pseudo-element?", "Virtual element *after* content. Best practices:\nDecorative content. Moderate specificity"
"What is the definition and best practices for using the ::first-letter pseudo-element?", "First letter of first line. Best practices:\nSubtle effects. Moderate specificity. Block-level"
"What is the definition and best practices for using the ::first-line pseudo-element?", "First line of text. Best practices:\nSubtle effects. Moderate specificity. Block-level"
"What is the definition and best practices for using the ::marker pseudo-element?", "List item marker box. Best practices:\nEnsure marker is clear. Moderate specificity. Keep Simple"
"What is the definition and best practices for using the ::placeholder pseudo-element?", "Placeholder text in inputs. Best practices:\nEnsure contrast. Don't replace labels. Subtlety"
"What is the definition and best practices for using the ::selection pseudo-element?", "Text selected by user. Best practices:\nEnsure contrast. Moderate specificity. Subtlety or branding"
"What is the definition and best practices for using the ::backdrop pseudo-element?", "Backdrop behind fullscreen. Best practices:\nEnsure contrast. Moderate specificity. Control opacity"
"What is the definition and best practices for using the ::grammar-error pseudo-element?", "Grammar errors. Best practices:\nExperimental. Ensure clear indicators. Moderate specificity"
"What is the definition and best practices for using the ::spelling-error pseudo-element?", "Spelling errors. Best practices:\nExperimental. Ensure clear indicators. Moderate specificity"
"What is the definition and best practices for using the ::highlight pseudo-element?", "Programmatically highlighted text. Best practices:\nNewer feature. JavaScript integration. Contrast"
"What is the definition and best practices for using the ::file-selector-button pseudo-element?", "Button of file input. Best practices:\nEnsure recognizable. Moderate specificity. Consistency"
"What is the definition and best practices for using the ::part pseudo-element?", "Parts of web component. Best practices:\nWeb Components. Respects boundaries. Semantic names"
"What is the definition and best practices for using the ::slotted pseudo-element?", "Slotted content in web component. Best practices:\nWeb components; slotted content. Selector context"
"What is the objective of the CSS Transform Generation Ruleset for AI Agents?", "To guide AI agents in generating high-quality performant accessible purposeful and maintainable CSS transforms."
"What is the primary use of CSS `transform`?", "Always favor using CSS `transform` for animations transitions and visual effects that involve movement scaling rotation or skewing."
"What properties should be prioritized for animation using `transform`?", "Prefer animating `transform` and `opacity` properties whenever possible."
"Why is it important to minimize layout impact when using `transform`?", "`transform` (in most cases) performs visual changes without affecting document layout or flow. Avoids layout recalculations."
"Why is it recommended to keep transform operations reasonably simple?", "Although `transform` is performant excessive complexity can still introduce rendering overhead."
"Why is it important to test transforms across different devices?", "Cross-device testing is crucial for validating transform performance across different rendering engines."
"What are the specific transform functions and their purposes?", "`translate()`: Movement. `rotate()`: Rotation. `scale()`: Resizing. `skew()`: Tilting. `matrix()`: Complex transforms."
"When should you use the `translate()` function and its variations?", "Use `translate(x, y)`, `translateX(x)`, or `translateY(y)` for element repositioning without layout shift."
"When should you use the `rotate()` function and its variations?", "Use `rotate(angle)`, `rotateX(angle)`, `rotateY(angle)`, or `rotateZ(angle)` for element rotation."
"When should you use the `scale()` function and its variations?", "Use `scale(factor)`, `scaleX(factor)`, `scaleY(factor)`, or `scaleZ(factor)` for element scaling."
"When should you use the `skew()` function and its variations?", "Use `skew(angleY, angleX)`, `skewX(angle)`, or `skewY(angle)` for skewing (tilting) elements."
"When should you use the `matrix()` function?", "Reserve `matrix(a, b, c, d, tx, ty)` for complex transformations or combining multiple transforms."
"What is the purpose of the `transform-origin` property?", "Controls the point around which transformations are applied."
"What is the purpose of the `transform-style: preserve-3d;` property?", "Enables 3D transformations on child elements. Without it nested 3D transforms will flatten."
"What is the purpose of the `perspective` property?", "Establishes a 3D perspective viewport for child elements with 3D transforms."
"What is the purpose of the `backface-visibility: hidden;` property?", "Hides the back face of the element when it rotates away from the viewer in 3D rotations."
"When should you use the `perspective()` transform *function*?", "To apply perspective directly to that element only and its children without affecting sibling elements."
"How should transforms be used to enhance user experience?", "Ensure all `transform` usage is purposeful and enhances user experience (UI feedback visual hierarchy subtle motion)."
"What kind of transforms are recommended for UI feedback and micro-interactions?", "Favor subtle and refined `transform` effects. Small quick transformations."
"What accessibility considerations apply to CSS transforms?", "Integrate with accessibility considerations particularly `prefers-reduced-motion`. Disable motion for users who prefer reduced motion."
"Should `transform` be used as a general layout tool?", "Avoid using `transform` as a layout hack. Use layout modules for layout tasks."
"How should related transform functions be grouped in CSS?", "Group related `transform` functions within a single `transform` property value."
"How can CSS variables be used with transforms?", "Leverage CSS variables to manage reusable transform values (e.g. animation distances rotation angles scale factors)."
"When should you comment complex transform operations?", "Comment CSS code for complex transform operations especially when using `matrix()`."
"What should you document if the `transform-origin` is not the default?", "Document the `transform-origin` if it is not the default center point. Explain why."
"What is the primary purpose of CSS Transitions?", "To smoothly animate changes between distinct states of an element or for subtle UI feedback."
"What properties are best suited for smooth transitions, and why?", "Favor transitioning `transform` and `opacity` properties for optimal performance (hardware-accelerated)."
"Why should you minimize layout shifts during transitions?", "Layout reflows are performance bottlenecks. Minimize layout changes to maintain smoothness."
"What are the guidelines for transition durations?", "Use short purposeful transition durations (typically under 1 second)."
"Why is it important to test transitions across different devices?", "Cross-device testing validates transition performance across different rendering environments."
"What is the purpose of the `transition-property` property?", "Explicitly defines the CSS properties you intend to transition."
"What is the purpose of the `transition-duration` property?", "Specifies the length of the transition effect. Required for a transition to occur."
"What is the purpose of the `transition-timing-function` property?", "Controls the easing curve of the transition (smoothness)."
"What is the purpose of the `transition-delay` property?", "Adds a delay before the transition effect starts."
"What is the `transition` shorthand property and how is it used?", "Combines `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`. `transition: property duration timing-function delay;`"
"Where should you define `transition` properties in your CSS?", "Define `transition` properties within the *base styles* of an element or in the *default state* rulesets NOT trigger states."
"How do you trigger transitions in CSS?", "Trigger transitions by changing element states using CSS pseudo-classes or by dynamically adding/removing CSS classes."
"What should trigger state changes that initiate transitions?", "Ensure state changes are clear purposeful and user-initiated (or system-initiated)."
"What is the recommended approach to transitions for accessibility?", "Favor subtle and refined transitions. Respect `prefers-reduced-motion`."
"Should transitions be used to convey critical information?", "Avoid relying *solely* on transitions to convey critical information. Provide alternatives."
"Where should you define transition properties in relation to the element's base styles?", "Define `transition` properties close to the *base styles* or in a dedicated section."
"How can CSS variables be used to manage transitions?", "Leverage CSS variables to manage reusable transition durations easing curves or transitioned properties."
"When should you comment CSS transition code?", "Comment transitions that are not obvious in purpose or configuration."
"What is a recommended practice for maintaining a consistent visual style across transitions in a project?", "Strive for a consistent \"transition language\" or style. Use similar easing duration and properties."
"What is the primary purpose of CSS Variables (Custom Properties)?", "Primarily for *theming*, *creating reusable design tokens*, and promoting *consistency* and *reusability*."
"Where should global CSS Variables be declared?", "Declare *global CSS variables* within the `:root` pseudo-class."
"When should you use component-scoped CSS Variables?", "Utilize component-scoped CSS variables within component stylesheets for component-specific style customizations."
"What kind of names should you use for CSS Variables?", "Use descriptive and meaningful variable names clearly indicating the *purpose*, *value*, or *context*."
"How should you organize CSS Variables, especially in larger projects?", "Employ namespacing conventions and logical categorization. Use prefixes (e.g., `-color-`, `-font-`, `-spacing-`) to group variables by category."
"What is the correct syntax for accessing and applying the values of CSS Variables?", "Always use the `var()` CSS function: `var(--variable-name)`."
"How can you provide default values or fallback styles when using CSS Variables?", "Utilize fallback values within the `var()` function: `var(--variable-name, fallbackValue)`."
"What should CSS Variables primarily be used for, and what should they *not* be used for?", "Utilize CSS Variables for *controlling style properties*. Avoid misusing them for data or content."
"How can component-scoped CSS Variables be used for component theming and variations?", "Leverage component-scoped variables to create *component themes* and *style variations*."
"How can you leverage the CSS Variable cascade and inheritance for theming?", "Understand and leverage cascade and inheritance to create *theming hierarchies*. Global `:root` variables are base defaults; component variables can override."
"How can you implement dynamic theme switching using CSS Variables?", "Update CSS Variable values *programmatically using JavaScript*. Access/modify with `document.documentElement.style.setProperty()`."
"What is the general performance impact of using CSS Variables for theming?", "CSS Variables generally have *minimal performance overhead* for theming. Browsers are optimized for this."
"What accessibility considerations are important when using CSS Variables for theming?", "Ensure themed styles maintain *accessibility standards*, particularly *sufficient color contrast*."
"What practices are crucial for maintaining a well-organized and understandable CSS Variable codebase?", "Prioritize *maintainable organization* and *clear documentation*. Organize logically, document purpose/scope."
"Create a checklist to verify generated CSS code utilizing CSS variables adheres to the ruleset.", "[ ] CSS Variables Used for Theming & Reusability (Central Purpose): Are CSS Variables used primarily for theming creating reusable design tokens and promoting consistency (as intended)?\n[ ] `:root` for Global Variables (Theme Definitions Centralized): Are global CSS Variables declared within the `:root` pseudo-class for centralized theme management?\n[ ] Component-Scoped Variables for Encapsulation (Component Theming): Are component-scoped CSS Variables utilized for component-specific styling variations and local theming?\n[ ] Descriptive Variable Names (Semantic & Contextual Clarity): Are CSS Variable names descriptive meaningful and indicative of their purpose and value (clarity prioritized over brevity)?\n[ ] Namespacing & Categorization for Variable Organization (Scalability): Are CSS Variables logically organized using namespaces categories or file structures especially for larger projects with numerous variables?\n[ ] `var()` Function Used for Variable Access (Consistent Syntax): Is the `var()` function consistently used to access and apply CSS Variable values in all style rules?\n[ ] Fallback Values in `var()` Function (Robustness & Defaults): Are fallback values included in `var()` functions to provide default styles and enhance CSS robustness if variables are missing or invalid?\n[ ] Semantic CSS Variable Usage (Style Properties Only Not Data/Content): Are CSS Variables used primarily for style properties avoiding misuse for data storage or content management (separation of concerns)?\n[ ] Component-Scoped Variables for Component Theming & Variations: Are component-scoped variables leveraged for component theming and style variations within Angular components?\n[ ] CSS Variable Cascade & Inheritance Leveraged for Theming Hierarchies: Is the CSS Variable cascade and inheritance mechanism understood and leveraged to create theming hierarchies and cascading style overrides?\n[ ] Dynamic Theme Switching via JavaScript Variable Updates: Is JavaScript-driven CSS Variable updates (using `document.documentElement.style.setProperty()` or similar) employed for dynamic theme switching and runtime theme adjustments when required?\n[ ] Performance of CSS Variables Considered (Generally Performant): Is the generally performant nature of CSS Variables understood and leveraged for theming without undue performance concerns (unless extreme animation scenarios)?\n[ ] Accessibility of Themed Styles Maintained (Color Contrast & Usability): Is the accessibility of themed styles maintained ensuring sufficient color contrast and usability across all theme variations generated with CSS Variables?\n[ ] Maintainable CSS Variable Organization & Documentation (Long-Term Projects): Is maintainable CSS Variable organization and clear documentation prioritized especially in larger projects with extensive theming and variable usage for long-term code health and collaboration?"