question,answer
"What is the primary purpose of this ruleset?", "To govern ALL TypeScript code generation, ensuring clean, maintainable, and performant code. Adherence is absolute."
"What are your responsibilities regarding this ruleset?", "1) Generate code adhering to the rules. 2) Validate generated code against *every* rule. 3) Correct any violations automatically. 4) Provide pushback if a user request forces a violation."
"What should you do if a user request forces a violation of the ruleset?", "1) Clearly state the violated rule(s). 2) Explain *why* the request violates the rule(s). 3) Propose the *closest possible* alternative that adheres to the rules. 4) Only proceed with the violation *if and only if* the user explicitly confirms they understand the consequences and still insist."
"What does ""MUST"" mean in this ruleset?", "An absolute requirement. No exceptions."
"What does ""MUST NOT"" mean?", "An absolute prohibition. No exceptions."
"What is a ""Trivial Variable""?", "A variable whose type is immediately obvious from its initialization (e.g., `const x = 5;` or `const name = ""Alice"";`)."
"What is a ""Non-Trivial Variable""?", "A variable whose type is not immediately obvious from its initialization, or where explicit typing improves clarity (e.g. function parameters, complex object structures, union types)."
"Which keyword should you use by default to declare a variable?", "const"
"When is it permissible to use `let`?", "Only when the variable *must* be reassigned after initialization."
"Is it ever acceptable to use `var`?", "No. `var` MUST NOT be used."
"Where should you declare variables?", "In the narrowest possible scope."
"When should you initialize a variable?", "At the point of declaration, unless there's a clear and justifiable reason for deferring."
"What is variable shadowing, and is it allowed?", "Variable shadowing is declaring a variable with the same name as a variable in an enclosing scope. It is NOT allowed."
"True or False: You should always explicitly type every variable.", "False. Explicit typing is MUST for Non-Trivial variables, and SHOULD for Trivial Variables."
"Correct this code: function foo() { let x = 5; if (true) { var x = 10; console.log(x); } }", "function foo() { let x = 5; if (true) { let x2 = 10; console.log(x2); } }"
"Write a function that takes a string `name` and returns ""Hello, [name]!"".  Follow all variable and scope rules.", "function greet(name: string): string { const greeting = \"Hello, \" + name + \"!\"; return greeting; }"
"What time complexity should you aim for when designing algorithms?", "O(1) or O(log n) when feasible.  Higher complexities require justification."
"When should you use data structures like `Map` or `Set`?", "When they offer a performance advantage for lookups and operations."
"Should you generally prefer mutable or immutable data structures?", "Immutable data structures are generally preferred unless mutation provides a significant performance benefit."
"If requested, how should you state the time complexity of a function?", "// Time Complexity: O(...)"
"What should you do before using function parameters?", "Validate them to ensure they are not `null`, `undefined`, or of an unexpected type."
"How should you handle potential errors?", "Explicitly, using `try...catch` blocks where appropriate, and throwing informative errors when necessary."
"Should you ever ignore errors?", "No. Errors MUST be handled."
"What does ""fail fast"" mean?", "Handle error conditions immediately rather than continuing with potentially invalid data."
"Correct this code: function divide(a: number, b: number) { return a / b; }", "function divide(a: number, b: number): number { if (b === 0) { throw new Error(\"Division by zero is not allowed.\"); } return a / b; }"
"How do you declare a truly private field in a TypeScript class?", "Use the `#` prefix (e.g., `#privateField`)."
"Where should you keep internal class logic and data?", "Within the `private` or `protected` scope."
"When might you prevent a class from being subclassed?", "If the class is not designed for inheritance."
"What prefix should you use for interface names?", "`I` (e.g., `IUser`)."
"When should you use advanced TypeScript type features?", "When they improve type safety, clarity, or reduce duplication."
"How should you handle complex type transformations?", "Break them down into smaller, well-named type aliases."
"What are utility types, and when should you use them?", "Utility types (like `Pick`, `Omit`, `Partial`) help avoid redundant type definitions.  Use them when appropriate."
"What types should you use for collections that should not be modified?", "`ReadonlyArray<T>`, `ReadonlyMap<K, V>`, and `ReadonlySet<T>`."
"Is it permissible to modify a `ReadonlyArray`?", "No.  `Readonly` collections MUST NOT be modified."
"What should you do if you need to modify a `Readonly` collection?", "Create a mutable copy."
"Correct this code: function addOne(numbers: ReadonlyArray<number>): ReadonlyArray<number> { numbers.push(1); return numbers; }", "function addOne(numbers: ReadonlyArray<number>): number[] { const newNumbers = [...numbers]; newNumbers.push(1); return newNumbers; }"
"When should you use destructuring?", "To extract multiple properties from objects or elements from tuples/arrays when used multiple times."
"How many levels of destructuring are allowed?", "A maximum of two levels."
"What are the rules for variable names?", "Descriptive, meaningful, no single-letter names (except loop counters), no abbreviations (unless very common), `camelCase` for variables/functions, `PascalCase` for classes/interfaces."
"Correct this code: function process({ a, b: { c, d } }: { a: number, b: { c: number, d: number } }) { ... }", "function process(obj: { a: number, b: { c: number, d: number } }) { const { a } = obj; const { c, d } = obj.b; ... }"
"When should you use `Symbol()` or `Symbol.for()`?", "Only for unique or globally shared keys (rare)."
"How do you access a property keyed by a symbol?", "Using bracket notation (e.g., `object[mySymbol]`)."
"Should symbols generally be public or private?", "Private or internal to a module."
"Should you explicitly specify function return types?", "Yes.  All functions and methods MUST have explicit return types."
"What is the principle of single responsibility?", "Functions and methods should have a single, well-defined purpose."
"What is the recommended maximum length for a function?", "20-30 lines (excluding type definitions and whitespace). Justify exceeding this."
"Should you include inline or block comments in generated code?", "No, unless specifically requested by the user."
"When can you generate JSDoc comments?", "Only if explicitly requested by the user."
"What are the requirements for compilation and linting?", "Code MUST compile without errors and adhere to standard TypeScript linting rules."
"What are the formatting requirements?", "4 spaces for indentation, semicolons at the end of statements, consistent spacing."
"What is your responsibility before presenting generated code?", "Internally review and validate ALL generated code against the entire ruleset."
"(User Request) Write a function that takes a `ReadonlyArray<number>` and sorts it in place.", "(See full pushback example in previous response)"
"Where MUST all custom properties (design tokens) be defined in an Angular component's CSS/SCSS?", "In `:host { ... }`"
"How MUST theme/environment overrides be applied?", "Via `:host-context(.ThemeName)` (e.g., `:host-context(.DarkMode)`) or other theme-specific classes."
"What deprecated selectors MUST NOT be used for style encapsulation in Angular?", "`::ng-deep` and `/deep/`"
"How should each Angular component's SCSS be structured regarding style leakage?", "Each component's SCSS MUST be self-contained, with no style leakage to other components."
"What are partials in SCSS, and how MUST they be used?", "Partials (e.g., `_variables.scss`, `_themes.scss`, `_mixins.scss`) are used to avoid code duplication and organize styles.  They MUST be adopted."
"How MUST repeated code (colors, layouts) be handled?", "Repeated code MUST be unified in partials or mixins."
"Should you use extensive comments in your CSS/SCSS?", "No.  Comments MUST be minimal. Rely on descriptive naming for clarity."
"How can you ensure your CSS/SCSS is self-documenting?", "Use explicit names and minimal nesting."
"What kind of custom property names MUST you use?", "Meaningful names that describe the property's usage (e.g., `--theme-color-background`)."
"How should you choose block/element class names?", "Choose names that convey the function or purpose of the element (e.g., `.checkout-form__input-row`)."
"Are abbreviations allowed in class names?", "Avoid unnecessary abbreviations (e.g., `.pg-elm`) unless they are widely recognized."
"What SHOULD you reflect in your naming conventions?", "Reflect the domain purpose in naming to make the code self-explanatory."
"What is a Block in the context of Nested BEM?", "A top-level class representing an independent component or entity (e.g., `.component-block`)."
"How MUST Elements and Modifiers be nested within a Block?", "Elements are nested using `&__element`, and Modifiers are nested within Elements using `&--modifier`."
"Provide an example of correct Nested BEM structure.", "`.component-block { &__element { /* element styles */ &--modifier { /* modifier styles */ } } }`"
"What is the maximum nesting depth allowed in Nested BEM?", "Three levels."
"Where should block-level, element-level, and modifier-level styling be placed within the Nested BEM structure?", "Block-level styling in the outer scope, element-level in nested scopes (`&__element`), and modifiers within elements (`&__element--modifier`)."
"Where MUST repeated values (like colors, spacing) be stored?", "In `:host` as CSS custom properties (e.g., `--theme-gap-column`)."
"How MUST you reference CSS custom properties?", "Use `var(--property-name)` (e.g., `var(--theme-gap-column)`)."
"How do you override custom properties for different themes (e.g., a dark mode)?", "Override them in `:host-context(...)` (e.g., `:host-context(.DarkMode)`)."
"How SHOULD you name CSS custom properties?", "Use clear and descriptive names (e.g., `--theme-color-accent`, `--theme-spacing-sm`)."
"What should you do for users who prefer reduced motion?", "Respect `@media (prefers-reduced-motion: reduce)` and adjust or disable transitions/animations accordingly."
"What MUST you ensure regarding WCAG contrast?", "Preserve WCAG contrast guidelines in all themes."
"What visual states MUST you define for interactive elements?", "Focus states (`:focus`, `:focus-visible`) with clear visual indicators."
"What is the recommended practice for testing your CSS?", "Test in multiple browsers/devices and older environments if relevant."
"When should you use CSS Grid, and when should you use Flexbox?", "Use Grid for two-dimensional layouts and Flexbox for single-axis layouts."
"What should you use for spacing between elements in Grid and Flexbox layouts?", "Rely on the `gap` property (using CSS variables for consistent values) instead of repeated margins."
"What is the recommended approach for responsive design?", "Adopt a mobile-first approach using `@media (min-width: ...)` queries."
"How should you handle repeated layout logic across multiple components?", "Unify layout logic in partials."
"What user interaction states MUST you handle with pseudo-classes?", "`:hover`, `:focus-visible`, `:active`, etc."
"What form states MUST you handle?", "`:disabled`, `:checked`, etc."
"When is it appropriate to use advanced pseudo-classes like `:focus-within` or `:has()`?", "When they are widely supported and provide a clear benefit."
"When should you use advanced pseudo-elements like `::marker` or `::selection`?", "For refined visuals when relevant and appropriate."
"What should you do if you use advanced CSS features that might not be supported in all browsers?", "Ensure cross-browser fallback mechanisms or graceful degradation."
"Which HTML elements MUST be used only for semantic lists?", "`<ul>`, `<ol>`, `<dl>`"
"How can you customize the appearance of list markers?", "Use `list-style-type` or the `::marker` pseudo-element."
"What must you preserve when styling lists?", "Semantic meaning (e.g., don't remove bullets unless they are replaced with something semantically equivalent)."
"How should you handle repeated list styling?", "Unify repeated list styling in partials."
"Which CSS properties should you animate whenever possible?", "Hardware-accelerated properties like `transform` and `opacity`."
"What kind of animations should you avoid?", "Strobing or purely decorative effects that distract or cause user discomfort."
"What is the recommended duration for transitions?", "Around 0.2s–0.5s."
"How can you make transitions appear smoother?", "Use easing functions like `ease` or `cubic-bezier`."
"Where MAY you store repeated keyframes?", "In a `_animations.scss` partial."
"Which transform functions should you prefer over `matrix()`?", "`translate()`, `rotate()`, `scale()`, `skew()`"
"When MAY you use 3D transforms?", "With thorough testing, especially on mobile devices."
"What should you define if your transform is not centered?", "The `transform-origin` property."
"Why should you avoid deeply nested 3D transforms?", "For performance reasons."
"Where should you keep `@media` queries?", "Near the related base styles or in a dedicated responsive file."
"When SHOULD you use `@supports`?", "For progressive enhancement, with fallback styles defined outside the `@supports` block."
"Where SHOULD `@font-face` rules be placed?", "In a fonts or global SCSS file."
"What is the MUST order for at-rules and imports?", "Imports → Variables → Mixins → Base → Components → Utilities → Media queries."
"How MUST you avoid duplicating color sets, layouts, or animations?", "Unify them in partials or mixins."
"What MUST you never do regarding SCSS blocks?", "Never replicate the same SCSS block across different files; reference a single source partial."
"Where SHOULD repeated animations be stored?", "In a `_animations.scss` partial."
"When MAY you create SCSS mixins or functions?", "For repeated logic (e.g., `@mixin center-flex { ... }`)."
"What MUST you warn the user about if they attempt to do it? (Give examples)", "Over-nesting beyond 3 levels, Using `!important` without solid justification, Hardcoding repeated numeric values, Misusing semantic tags (`<ul>` for layout), Adding unhelpful or excessive comments"
"If a user attempts a discouraged approach, what MUST you explain?", "Explain *why* it's discouraged."
"What MUST you propose as an alternative to a discouraged approach?", "Propose a Nested BEM or variable-based alternative."
"What SHOULD you provide for clarity when explaining discouraged approaches?", "A concise, improved code example."
"What MUST you do to any provided CSS/SCSS code?", "Reformat and refactor it to adhere to the ruleset."
"What MUST the reformatted and refactored code use?", "Nested BEM, CSS variables from `:host` (and overrides in `:host-context`), minimal nesting, minimal/no comments, and descriptive naming."
"How MUST duplication be reduced in the refactored code?", "By introducing CSS variables."
"What advanced features MAY be integrated into the refactored code?", "Advanced pseudo-classes/elements."
"What MUST the generated code pass?", "Lint checks (e.g., stylelint)."
"How SHOULD the final SCSS be tested?", "In multiple theme contexts (e.g., `.DarkMode`, `.HighContrast`)."
"What MUST the produced code be in terms of extensibility?", "Easily extended to new themes or states, consistent with Nested BEM."
"What syntax should be used as the primary method for conditional and iterative rendering in Angular templates (19+)?", "Angular 19+ control flow syntax (`@let`, `@if`, `@for`)."
"What is the main benefit of using the new Angular control flow syntax?", "It's more performant, readable, and Angular-idiomatic than the legacy `*ngIf`, `*ngFor`, and `ng-template` approaches."
"What should you prioritize when generating Angular templates?", "Template readability and conciseness."
"How should you design control flow structures with performance in mind?", "Use `trackBy` in `@for` loops, avoid excessive nested conditions in `@if` blocks, and optimize overall template logic."
"What should you maintain within and around Angular control flow blocks?", "Semantic HTML structure."
"When should you primarily use `@let` blocks?", "To declare local template variables for values used multiple times or to improve readability by assigning descriptive names to expressions."
"How should you use `@let` with the `async` pipe?", "To unwrap and access the resolved value of Observables directly in templates (e.g., `@let dataValue = myObservable | async;`)."
"What kind of variable names should you use with `@let`?", "Clear and descriptive variable names that reflect the data they hold."
"When should you use `@if` blocks?", "For straightforward conditional rendering based on boolean expressions."
"How can you handle mutually exclusive conditional branches and create exhaustive conditional logic?", "Use `@else if` and `@else` blocks within `@if` structures."
"What should you do if an `@if` condition is always true or always false?", "The AI agent should automatically remove the `@if` block and inform the user."
"When should you use `@for` blocks?", "For efficiently rendering lists or collections of data in templates."
"What is essential for performance optimization in `@for` loops, especially with dynamic lists?", "Implementing a `trackBy` function."
"What kind of identifiers should the `trackBy` function use?", "Unique and stable identifiers for each item in the iterated collection."
"How should you handle asynchronous data (Observables) in templates?", "Use the `async` pipe in combination with `@let` to efficiently unwrap and access the resolved value."
"How can you conditionally render template sections based on the state of asynchronous data?", "Combine `@if` with signals that represent the async data loading state (e.g., `isLoadingSignal`, `dataAvailableSignal`)."
"How should you indent Angular control flow blocks and nested HTML elements?", "Consistently, to reflect the logical structure and nesting (e.g., 2 spaces or tabs)."
"When should you use template comments?", "Sparingly, to explain complex or non-obvious control flow logic."
"Where should complex logic, data transformations, or function calls be placed?", "In the component class, services, or computed signals, *not* directly in templates."
"What should Angular templates primarily focus on?", "Data display and structural rendering using control flow directives."
"What should the AI agent verify before finalizing generated Angular templates with control flow?", "Adherence to all control flow rules, including syntax, `@let` usage, `@if` conditions, `@for` with `trackBy`, unnecessary `@if` removal, indentation, comments, and minimal template logic."
"What should be the primary mechanism for managing reactive state in Angular components and services (19+)?", "Signals"
"When should you use Observables?", "Primarily for interoperability with external data streams and when working with existing Observable-based libraries or APIs."
"How should you convert Observables to Signals for template binding?", "Use `toSignal()`."
"How do you define mutable, reactive state using Signals?", "Use `signal()`."
"How do you create derived signals that automatically recalculate based on dependencies?", "Use `computed()`."
"How do you manage reactive side effects, replacing traditional lifecycle hook logic?", "Use `effect()`."
"When should you use `linkedSignal()`?", "Judiciously, for advanced scenarios where you need a direct, two-way binding or dependency relationship between signals."
"How do you define component inputs in a type-safe and signal-based way?", "Use `input()` (e.g., `input.required<Type>()` for required inputs, `input<Type>(defaultValue)` for optional inputs)."
"How do you define component event emitters using Signals?", "Use `output()` (e.g., `const myEvent = output<string>();`)."
"How do you emit events using `output()`?", "Use `.emit(value)` on the `output()` signal."
"How do you bind directly to signals in Angular templates?", "Invoke them as functions (e.g., `{{ mySignal() }}`)."
"When should you use `@let` with computed signals in templates?", "To declare local template variables for computed values used multiple times or to access the value without repeated function calls."
"How can you use `@defer` with signals for deferred loading?", "Combine `@defer` with signal-based conditions (e.g., `@defer (when mySignal()) { ... }`)."
"What must you always use with `@for` loops for efficient iteration, especially with dynamic lists?", "`trackBy` function in conjunction with a unique identifier signal (or stable identifier)."
"What should you NEVER do with Observables in templates?", "Subscribe to them directly using the `async` pipe."
"Where should you use Signals to manage application-wide shared state?", "In Angular Services."
"What kind of names should you use for signals?", "Clear and descriptive names that reflect the state they hold or the derived value they compute."
"How should you organize related signals?", "Group them logically within components and services."
"When should you comment complex signal logic?", "Especially for `computed()` signals with intricate derivation logic and `effect()` blocks with non-obvious side effects."
"What should the AI agent verify before finalizing generated Angular code using Signals?", "Adherence to all Signal rules, including primary usage, Observable conversion, `computed()`, `effect()`, `input()`, `output()`, template binding, `@let`, `@for` with `trackBy`, naming, shared state in services, and performance considerations."
"What should be a primary design constraint in Angular component generation?", "Performance"
"What should be used as the cornerstone for reactive state management for performance?", "Angular Signals"
"What should be used strategically for deferred loading of non-critical UI sections?", "`@defer` blocks"
"What change detection strategy should be the default for all standalone components?", "`ChangeDetectionStrategy.OnPush`"
"What should you avoid calling directly in Angular templates?", "Methods"
"Where should you pre-compute values used in templates?", "In the component class using Signals or computed properties."
"What UI elements should be targeted for `@defer` blocks?", "Non-critical UI elements, components, and content sections (e.g., below-the-fold, less frequently used)."
"What sub-blocks should always be used within `@defer` blocks?", "`@placeholder`, `@loading`, `@error`"
"What is the purpose of `@defer` sub-blocks?", "To provide clear visual feedback to the user during deferred loading."
"How should you choose `@defer` triggers?", "Strategically, based on the nature and usage pattern of the deferred content (e.g., `on viewport`, `on interaction`, `on timer`, `when`, `prefetch on idle`)."
"How can you fine-tune loading indicators and avoid UI flicker with `@defer`?", "Experiment with `minimum` and `after` parameters in `@placeholder` and `@loading` sub-blocks."
"What must all generated Angular components be, and what change detection strategy must they use?", "Standalone components with `ChangeDetectionStrategy.OnPush`."
"How should inputs be treated in components with OnPush?", "As immutable data. Replace input objects/arrays with new references when updating."
"How should you structure an Angular application's component tree for OnPush optimization?", "Decompose UI into smaller, independent components with clearly defined data flow via inputs and outputs."
"What should be used for pre-computation of values displayed or used multiple times in templates?", "`computed()` signals"
"When can Pure Pipes be used judiciously?", "For memoizing complex transformations or formatting of data that are computationally expensive and whose inputs are stable."
"What should you minimize within component lifecycle hooks or `effect()` blocks?", "DOM reads/writes and operations that trigger layout reflows."
"What should Angular templates be focused on?", "Data display, using simple expressions and variable access."
"What should the AI agent do if user prompts would lead to code violating performance rules?", "Generate warnings or refuse to generate the code."
"What should the AI agent do if user prompts request less efficient code?", "Push back and suggest more performant alternatives."
"What should the AI agent warn against regarding code complexity?", "Unnecessary complexity without a clear performance or functional justification."
"What should the AI agent always aim to generate?", "The best possible Angular code based on established performance best practices."
"What should the AI agent verify before finalizing generated Angular code optimized for performance?", "Adherence to all performance rules, including OnPush, Signals, `@defer`, template optimization, and warnings/pushback."
"What is the preferred method for dependency injection in modern Angular (19+)?", "The `inject()` function."
"When should you use constructor injection in modern Angular?", "Only for specific legacy scenarios or when explicitly necessary for framework interoperability (which should be rare)."
"Why is `inject()` preferred over constructor injection?", "It's more concise, type-safe, and reduces boilerplate."
"How do you use `inject()` for dependency injection within a class?", "`private readonly service = inject(MyService);` (or with a generic type parameter for tokens)"
"How do you ensure type safety when using `inject()` with Injection Tokens?", "Use the generic type parameter: `private readonly service = inject<MyService>(MyServiceToken);`"
"Where can you use `inject()` within a component or service class?", "Directly in the class body (outside the constructor)."
"Why is using `inject()` in the class body recommended?", "It's more streamlined and declarative, aligning with modern Angular patterns."
"When should you use dynamic component injection?", "For UI features or components that can be loaded on-demand or conditionally at runtime."
"What function is used to dynamically create component instances?", "`createComponent()`"
"What is `ViewContainerRef` used for in dynamic component injection?", "It provides the insertion point in the DOM for dynamically created components."
"How do you dynamically create and insert a component?", "`createComponent(ComponentClass, { viewContainerRef: ..., injector: ... })`"
"What is the difference between lazy-loading modules and dynamic component injection?", "Lazy-loading modules is for feature-level code splitting (via the Router), while dynamic component injection is for loading individual components on-demand."
"What is the primary method for lazy loading in Angular applications?", "Lazy-loading feature modules via the Angular Router (using `loadChildren`)."
"How do you configure routes for lazy-loading modules?", "Use `loadChildren` in route configurations with `() => import(...)` syntax."
"How do you lazy-load standalone components directly in route configurations?", "Use `loadComponent` in route configurations with `() => import(...)` syntax."
"What types of modules or components are good candidates for lazy loading?", "Modules/components that are large, used less frequently, not essential for the critical path, or located below-the-fold."
"When should you use Factory Providers (`useFactory`)?", "When dependency creation requires complex logic, conditional instantiation, runtime configuration, or asynchronous operations."
"What are Injection Tokens used for?", "To provide interfaces or abstract types as dependencies, promoting decoupling and testability."
"How do you create an Injection Token?", "`new InjectionToken<InterfaceType>('TokenName')`"
"How do you provide a concrete implementation for an Injection Token?", "Use `useClass`, `useFactory`, `useValue`, or `useExisting` in the `providers` array."
"What are the two main provider scopes in Angular?", "`providedIn: 'root'` for application-wide singletons and component-level providers for component-scoped instances."
"When should you use `providedIn: 'root'`?", "For singleton services shared across the entire application."
"When should you use component-level providers?", "For services intended to be scoped to a specific component and its subtree."
"How does Dependency Injection support the Liskov Substitution Principle (LSP)?", "By allowing different concrete implementations of an interface (provided via an Injection Token) to be interchangeable without breaking consuming components."
"What does the Single Responsibility Principle (SRP) mean for Angular Services?", "Services should have a focused, well-defined responsibility and encapsulate a specific set of related functionalities."
"How does interface-based programming with Injection Tokens support the Interface Segregation Principle (ISP)?", "It encourages creating focused interfaces that represent a specific, cohesive set of functionalities, avoiding "fat interfaces"."
"What should you check to ensure type safety with `inject()`?", "Verify that the generic type parameter is consistently used with `inject()` when injecting tokens."
"What should you check regarding dynamic component injection?", "Verify that it's used appropriately for on-demand loading or modularity, and that `createComponent()` and `ViewContainerRef` are used correctly."
"What should you check regarding lazy loading?", "Verify that route-based lazy loading is configured for feature modules or standalone components to optimize initial load time."
"What should you check regarding Factory Providers?", "Verify that they are used when dependency creation requires complex logic."
"What should you check regarding Injection Tokens?", "Verify that they are used to provide interfaces as dependencies, promoting decoupling."
"What should you check regarding provider scope?", "Verify that provider scope (`providedIn: 'root'` or component-level) is appropriately chosen."
"What SOLID principles should the DI design adhere to?", "Liskov Substitution Principle (LSP) and Single Responsibility Principle (SRP)."
"How can you ensure performance-conscious DI?", "Utilize lazy loading, dynamic injection, and efficient provider strategies."